function [ JI, Dice, TPR, FPR, FNR, TNR ] = SegEvaluateJIDiceTPRFPR( phi_Alg, phi_GT )
% Compute Jaccard index, Dice, True positive rate, False positive rate
% for each cell in Pixel Level.
%
%   phi_Alg - segmentation result generated by the algorithm
%   phi_GT  - ground truth
%   * both are for each cell

    JI = jaccardSimilary(phi_Alg, phi_GT);
    Dice = DiceSimilarity(phi_Alg, phi_GT);

    [TPR, FPR, FNR, TNR ] = ComputePositiveNegativeRates(phi_Alg, phi_GT);
end

function sim = jaccardSimilary(phi_Alg, phi_GT)
% Compute Jaccard Index for two cells

    Voxel_idx_Alg = find(phi_Alg == 1);
    Voxel_idx_GT = find(phi_GT == 1);
    
    % Phi_1 intersect Phi_2
    Alg_and_GT = intersect(Voxel_idx_Alg, Voxel_idx_GT);
    num_Alg_and_GT = size(Alg_and_GT,1);
    
    % Phi_1 union Phi_2
    Alg_union_GT = union(Voxel_idx_Alg, Voxel_idx_GT);
    num_Alg_union_GT = size(Alg_union_GT,1);
    
    % Jaccard equation:
    sim = num_Alg_and_GT / num_Alg_union_GT;    
end

function sim = DiceSimilarity(phi_Alg, phi_GT)
% Compute Dice for two cells
    Voxel_idx_Alg = find(phi_Alg == 1);
    Voxel_idx_GT = find(phi_GT == 1);
    
    % Phi_1 intersect Phi_2
    Alg_and_GT = intersect(Voxel_idx_Alg, Voxel_idx_GT);
    num_Alg_and_GT = size(Alg_and_GT,1);
    
    % Pixel Number of phi_Alg and phi_GT, respectively.
    num_Alg = size(Voxel_idx_Alg,1);
    num_GT = size(Voxel_idx_GT,1);
    
    sim = (2 * num_Alg_and_GT) / (num_Alg + num_GT);
end

function [tpr, fpr, fnr, tnr] = ComputePositiveNegativeRates(phi_Alg, phi_GT)
% Compute:
%   1. True Positive rate (tpr)
%   2. False Positive rate (fpr)
%   3. False Negative rate (fnr)
%   4. True Negative rate (tnr)
% for each cell in Pixel Level.

    Voxel_idx_Alg = find(phi_Alg == 1);
    Voxel_idx_GT = find(phi_GT == 1);
    
    %=================
    %  True Positive
    %=================
    tp = intersect(Voxel_idx_Alg, Voxel_idx_GT);
    
    %================
    % False Positive
    %================
    fp = setdiff(Voxel_idx_Alg, tp);
    
    %================
    % False Negative
    %================
    fn = setdiff(Voxel_idx_GT, tp);
    
    %=================
    %  True Negative
    %=================
    nonVoxel_idx_Alg = find(phi_Alg == 0);
    nonVoxel_idx_GT = find(phi_GT == 0);
    tn = intersect(nonVoxel_idx_Alg, nonVoxel_idx_GT);
    
    %=================
    %      RATE
    %=================
    tpr = size(tp, 1) / (size(tp, 1) + size(fn, 1));
    
    fpr = size(fp, 1) / (size(fp, 1) + size(tn, 1));
    
    fnr = size(fn, 1) / (size(tp, 1) + size(fn, 1));
    
    tnr = size(tn, 1) / (size(fp, 1) + size(tn, 1));
end